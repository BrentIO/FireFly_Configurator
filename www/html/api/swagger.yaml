########################################################################
##    GENERAL                                                         ##
########################################################################

swagger: "2.0"

info:
  description: "This document explains available operations for the FireFly Configurator API."
  version: "1.0"
  title: "FireFly Configurator"
  license:
    name: "For licensing, see the repo on GitHub."
    url: "https://github.com/BrentIO/FireFly_Configurator/"

host: "10.1.1.87"

basePath: "/api"

schemes:
- "http"




########################################################################
##    TAGS                                                            ##
########################################################################

tags:
- name: "System Health"
  description: "Performs a health check on the HTTP and database servers"
- name: "Circuit Breakers"
  description: "Retrieves, edits, and deletes a circuit breaker"
- name: "Controllers"
  description: "Retrieves, edits, and deletes attributes for a controller"
- name: "Switches"
  description: "Retrieves, edits, and deletes attributes for a switch and switch buttons"
- name: "Inputs"
  description: "Retrieves, edits, and deletes inputs to the controller"
- name: "Outputs"
  description: "Retrieves, edits, and deletes outputs from the controller"
- name: "Actions"
  description: "Retrieves, edits, and deletes actions an Input has on an Output"
- name: "Settings"
  description: "Retrieves and edits system settings"




########################################################################
##    PATHS                                                           ##
########################################################################

paths:
  ################ Heartbeat ################
  /heartbeat:
    get:
      tags:
      - "System Health"
      summary: "Retrieves the status of the web and database servers."
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Heartbeat"
        405:
          description: "Method Not Allowed"
        500:
          description: "Internal Server Error"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/Error"
      security: []
  

  ################ Circuit Breakers ################
  /breaker:
    get:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Retrieves a list of all circuit breakers" 
      operationId: listBreakers
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

    post:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new circuit breaker" 
      operationId: createBreaker
      parameters:
        - in: body
          name: breaker
          description: "The circuit breaker to create"
          schema:
            type: object
            required:
              - name
            $ref: "#/definitions/Breaker"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"


  /breaker/{id}:
    get:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Retrieves a circuit breaker by ID" 
      operationId: getBreakerById
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the circuit breaker to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    patch:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Edits an existing circuit breaker" 
      operationId: editBreaker
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the breaker to edit"
        required: true
        type: "integer"
        format: "int32"
      - in: body
        name: breaker
        description: "The circuit breaker to create"
        schema:
          type: object
          $ref: "#/definitions/Breaker"
          required:
           - id
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    delete:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Deletes an existing circuit breaker" 
      operationId: deleteBreaker
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the circuit breaker to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
  

  ################ Switches ################        
  /buttonColor:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a list of all defined button LED colors" 
      operationId: listButtonColor
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    
    post:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new button LED color" 
      operationId: createButtonColor
      parameters:
        - in: body
          name: buttonLEDColor
          description: "The button LED color to create"
          schema:
            type: object
            $ref: "#/definitions/ButtonLEDColor"
            required:
              - name
              - hexValue
              - brightnessMinimum
              - brightnessMaximum
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"


  /buttonColor/{id}:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a button LED color by ID" 
      operationId: getButtonLEDColorByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the button LED color to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    
    patch:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing button LED color" 
      operationId: editButtonColor
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the button LED color to return"
        required: true
        type: "integer"
        format: "int32"
      - in: body
        name: buttonLEDColor
        description: "The button LED color to edit"
        schema:
          type: object
          $ref: "#/definitions/ButtonLEDColor"
          required:
            - name
            - hexValue
            - brightnessMinimum
            - brightnessMaximum
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    
    delete:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Deletes existing button LED color" 
      operationId: deleteButtonColor
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the button LED color to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /brightnessName:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a list of all named button LED brightness levels" 
      operationId: listBrightnessName
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    post:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new named button LED brightness level" 
      operationId: createBrightnessName
      parameters:
        - in: body
          name: brightnessName
          description: "The button LED brightness name to create"
          schema:
            type: object
            $ref: "#/definitions/BrightnessName"
            required:
              - name
              - brightnessValue
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"


  /brightnessName/{id}:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a named button LED brightness level by ID" 
      operationId: getBrightnessNameByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the named button LED brightness to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    
    patch:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing named button LED brightness level" 
      operationId: editBrightnessName
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the named button LED brightness to edit"
          required: true
          type: "integer"
          format: "int32"
        - in: body
          name: brightnessName
          description: "The button LED brightness name to edit"
          schema:
            type: object
            $ref: "#/definitions/BrightnessName"
            required:
              - name
              - brightnessValue
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"

        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    delete:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Deletes a named button LED brightness level" 
      operationId: deleteBrightnessName
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the named button LED brightness level to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /switch:
    get:
        tags:
        - "Switches"
        produces:
        - "application/json"
        description: "Retrieves a list of all defined switches" 
        operationId: listSwitch
        security: 
          - ApiKeyAuth: [] 
        responses:
          200:
            description: "Success"
            schema:
              type: array
              items:
                $ref: "#/definitions/Switch"
          400:
            description: "Bad Request"
            schema:
              $ref: "#/definitions/Error"
          401:
            description: "Unauthorized"
          404:
            description: "Not Found"
            schema:
              $ref: "#/definitions/Error"
          500:
            description: "Internal Server Error"
    
    post:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new switch" 
      operationId: createButtonColor
      parameters:
        - in: body
          name: switch
          description: "The switch to create"
          schema:
            type: object
            required:
            - controllerId
            - macAddress
            - hwVersion
            $ref: "#/definitions/Switch"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Switch"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"


  #/switch/{id}:

  #/switch/bootstrap/{deviceName}:



  ################ Controllers ################
  /controller:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves a list of all controllers" 
      operationId: listControllers
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    
    post:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new controller" 
      operationId: createController
      parameters:
        - in: body
          name: Controller
          description: "The controller to create"
          schema:
            type: object
            $ref: "#/definitions/Controller"
            required:
              - macAddress
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"


  /controller/{id}:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves a controller by ID" 
      operationId: getControllerByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    patch:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing controller by ID" 
      operationId: editController
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the controller to edit"
          required: true
          type: "integer"
          format: "int32"
        - in: body
          name: Controller
          description: "The controller to edit"
          schema:
            type: object
            $ref: "#/definitions/Controller"
            required:
              - id
              - macAddress
              - hwVersion
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    delete:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Deletes a controller by ID" 
      operationId: deleteController
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /controller/bootstrap/{deviceName}:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves a controller by device name" 
      operationId: getControllerNameByDeviceName
      parameters:
      - name: "deviceName"
        in: "path"
        description: "The device name (MAC Address) of the controller to retrieve"
        required: true
        type: "string"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#/definitions/ControllerBootstrap"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /controller/{id}/pins/available:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves the list of available pins for a given controller ID" 
      operationId: getPinsAvailableByControllerID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PinAvailable"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /controller/{id}/pins/assigned:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves the list of assigned pins for a given controller ID" 
      operationId: getPinsAssignedByControllerID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PinAssigned"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"

          
  /controller/{id}/ports/available:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves the list of available ports for a given controller ID" 
      operationId: getportsAvailableByControllerID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PortAvailable"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /controller/{id}/ports/assigned:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves the list of assigned ports for a given controller ID" 
      operationId: getPortsAssignedByControllerID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PortAssigned"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"



  ################ Settings ################
  /setting:
    get:
      tags:
      - "Settings"
      produces:
      - "application/json"
      description: "Retrieves a list of all settings" 
      operationId: listSettings
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Setting"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"

  /setting/{id}:
    get:
      tags:
      - "Settings"
      produces:
      - "application/json"
      description: "Retrieves a setting by ID" 
      operationId: listSettingById
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the setting to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Setting"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    patch:
      tags:
      - "Settings"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits a setting value by ID" 
      operationId: editSetting
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the setting to edit"
          required: true
          type: "integer"
          format: "int32"
        - in: body
          name: setting
          description: "The setting to edit"
          schema:
            type: object
            $ref: "#/definitions/Setting"
            required:
              - value              
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Setting"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /firmware:
    get:
      tags:
      - "Settings"
      produces:
      - "application/json"
      description: "Retrieves a list of all switches" 
      operationId: listSwitch
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Firmware"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"

    post:
      tags:
      - "Settings"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new firmware" 
      operationId: createFirmware
      parameters:
        - in: body
          name: controller
          description: "The firmware to create"
          schema:
            type: object
            $ref: "#/definitions/Firmware"
            required:
                - deviceType
                - url
                - version              
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Firmware"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"


  /firmware/{id}:
    get:
      tags:
      - "Settings"
      produces:
      - "application/json"
      description: "Retrieves a firmware by ID" 
      operationId: getFirmwareByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the firmware to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Firmware"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    patch:
      tags:
      - "Settings"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing firmware by ID" 
      operationId: editFirmware
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the firmware to edit"
          required: true
          type: "integer"
          format: "int32"
        - in: body
          name: firmware
          description: "The controller to edit"
          schema:
            type: object
            $ref: "#/definitions/Firmware"
            required:
              - deviceType
              - url
              - version   
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Firmware"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    delete:
      tags:
      - "Settings"
      produces:
      - "application/json"
      description: "Deletes a firmware by ID" 
      operationId: deleteFirmware
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the firmware to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"





########################################################################
##    SECURITY                                                        ##
########################################################################

securityDefinitions:
  ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key





########################################################################
##    DEFINITIONS                                                     ##
########################################################################

definitions:

  Error:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Additional data about the given error"
  

  Heartbeat:
    type: "object"
    properties:
      time:
        type: "string"
        format: "date-time"
        description: "Current date and time UTC"
      status:
        type: "string"
        description: "Will always return \"ok\" on success"


  Breaker:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Unique ID"
      name:
        type: string
        description: "Unique name"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 20
      amperage:
        type: integer
        description: "The amperage of the circuit breaker"
  

  ButtonLEDColor:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      name:
        type: string
        description: "Unique name"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 20
      hexValue:
        type: string
        description: "The button LED color in hex (#XXXXXX), hash sign optional"
        maxLength: 7
      brightnessMinimum:
        type: integer
        minimum: 0
        maximum: 100
        description: "The minimum brightness this LED can be set"
      brightnessMaximum:
        type: integer
        minimum: 0
        maximum: 100
        description: "The maximum brightness this LED can be set"


  BrightnessName:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      name:
        type: string
        description: "Unique name"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 20
      brightnessValue:
        type: integer
        minimum: 0
        maximum: 100
        description: "The value this brightness name represents"


  Controller:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      name:
        type: string
        description: "Name of the controller"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 20
      macAddress:
        type: string
        description: "Unique MAC hardware address"
        maxLength: 17
      ipAddress:
        type: string
        description: "IP address"
        maxLength: 15
      subnet:
        type: string
        description: "Subnet mask"
        maxLength: 15
      dns:
        type: string
        description: "IP address of the DNS server"
        maxLength: 15
      gateway:
        type: string
        description: "IP address of the network gateway"
        maxLength: 15
      mqttUsername:
        type: string
        description: "Override of the default MQTT username"
        maxLength: 20
      mqttPassword:
        type: string
        description: "Override of the default MQTT password"
        maxLength: 255
      hwVersion:
        type: integer
        description: "Hardware version"
        enum:
          - 2


  ControllerBootstrap:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      mqtt:
        type: object
        description: "Information about the MQTT connection"
        properties:
          serverName:
            type: string
            description: "MQTT server name or IP address"
            maxLength: 255
          port:
            type: integer
            description: "MQTT server port number"
          username:
            type: string
            description: "MQTT server username"
            maxLength: 20
          password:
            type: string
            description: "MQTT server password"
            maxLength: 255
          topics:
            type: object
            properties:
              event:
                type: string
                description: "Topic the controller posts event information"
                maxLength: 255
              client:
                type: string
                description: "Topic used for broadcasting metadata about the device"
                maxLength: 255
              control:
                type: string
                description: "Topic used to direct the controller to take an action"
                maxLength: 255
      name:
        type: string
        description: "Name of the controller"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 20
      network:
        type: object
        description: "Information about the network connection"
        properties:
          macAddress:
            type: string
            description: "Unique MAC hardware address"
            maxLength: 17
          ipAddress:
            type: string
            description: "IP address"
            maxLength: 15
          gateway:
            type: string
            description: "IP address of the network gateway"
            maxLength: 15
          subnet:
            type: string
            description: "Subnet mask"
            maxLength: 15
          dns:
            type: string
            description: "IP address of the DNS server"
            maxLength: 15 


  PinAvailable:
    type: object
    properties:
      pin:
        type: integer
        description: "The physical pin number"
      controllerId:
        type: integer
        description: "Controller's Unique ID"
      inputAllowed:
        type: boolean
        description: "If input is allowed on the pin"
      binaryOutputAllowed:
        type: boolean
        description: "If binary output is allowed on the pin"
      variableOutputAllowed:
        type: boolean
        description: "If variable output is allowed on the pin"


  PinAssigned:
    type: object
    properties:
      pin:
        type: integer
        description: "The physical pin number"
      controllerId:
        type: integer
        description: "Controller's Unique ID"
      switchId:
        type: integer
        description: "Switch's Unique ID"
      pinType:
        type: string
        description: "Pin usage"
        enum:
          - "INPUT"
          - "OUTPUT"


  PortAvailable:
    type: object
    properties:
      port:
        type: integer
        description: "The physical port number"
      controllerId:
        type: integer
        description: "Controller's Unique ID"
      inputAllowed:
        type: boolean
        description: "If input is allowed on the port"
      outputAllowed:
        type: boolean
        description: "If output is allowed on the port"


  PortAssigned:
    type: object
    properties:
      controllerId:
        type: integer
        description: "Controller's Unique ID"
      port:
        type: integer
        description: "The physical port number"
      portType:
        type: integer
        description: "The port type"
        enum:
          - "INPUT"
          - "OUTPUT"
      id:
        type: integer
        description: "The ID of either the input or output assigned to this port"





  Setting:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      name:
        type: string
        description: "Unique name"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 40
      value:
        type: string
        description: "The value this setting represents"
        maxLength: 255


  Firmware:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      deviceType:
        type: string
        description: "Targeted Device Type"
        maxLength: 10
        enum:
          - "Switch"
      version:
        type: integer
        description: "Firmware version number"
      url:
        type: string
        description: "Location where the firmware can be downloaded"
        maxLength: 255


  Switch:
    type: object
    properties:
      id:
        type: integer
        description: "Unique ID"
      controllerId:
        type: integer
        description: "Host Controller"
      controllerPort:
        type: integer
        description: "Controller port number; If NULL, next available port is assigned"
      macAddress:
        type: string
        description: "Unique MAC hardware address"
        maxLength: 17
      hwVersion:
        type: integer
        description: "Hardware version"
        enum:
         - 2
      name:
        type: string
        description: "Name of the switch"
        maxLength: 20
      displayName:
        type: string
        description: "A descriptive display name"
        maxLength: 20
      mqttUsername:
        type: string
        description: "Override of the default MQTT username"
        maxLength: 20
      mqttPassword:
        type: string
        description: "Override of the default MQTT password"
        maxLength: 255
      firmwareId:
        type: integer
        description: "Firmware ID to use; If NULL, latest firmware is assigned"