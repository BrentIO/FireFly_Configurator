swagger: "2.0"

info:
  description: "This document explains available operations for the FireFly Configurator API."
  version: "1.0"
  title: "FireFly Configurator"
  license:
    name: "For licensing, see the repo on GitHub."
    url: "https://github.com/BrentIO/FireFly_Configurator/"

host: "10.1.1.87"

basePath: "/api"

tags:
- name: "System Health"
  description: "Performs a health check on the HTTP and database servers"
- name: "Circuit Breakers"
  description: "Retrieves, edits, and deletes a circuit breaker"
- name: "Controllers"
  description: "Retrieves, edits, and deletes attributes for a controller"
- name: "Switches"
  description: "Retrieves, edits, and deletes attributes for a switch and switch buttons"
- name: "Inputs"
  description: "Retrieves, edits, and deletes inputs to the controller"
- name: "Outputs"
  description: "Retrieves, edits, and deletes outputs from the controller"
- name: "Actions"
  description: "Retrieves, edits, and deletes actions an Input has on an Output"
- name: "Settings"
  description: "Retrieves and edits system settings"

schemes:
- "http"

paths:

  #Heartbeat
  /heartbeat:
    get:
      tags:
      - "System Health"
      summary: "Retrieves the status of the web and database servers."
      produces:
      - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Heartbeat"
        405:
          description: "Method Not Allowed"
        500:
          description: "Internal Server Error"
        503:
          description: "Service Unavailable"
          schema:
            $ref: "#/definitions/Error"
      security: []
  
  #Circuit Breakers
  /breaker:
    get:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Retrieves a list of all circuit breakers" 
      operationId: listBreakers
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    post:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new circuit breaker" 
      operationId: createBreaker
      parameters:
        - in: body
          name: breaker
          description: "The circuit breaker to create"
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: "Unique name of the circuit breaker"
              displayName:
                type: string
                description: "A descriptive display name of the circuit breaker"
              amperage:
                type: integer
                description: "The amperage of the circuit breaker"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
  
  /breaker/{id}:
    get:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Retrieves a circuit breaker by ID" 
      operationId: getBreakerById
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the circuit breaker to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    patch:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Edits an existing circuit breaker" 
      operationId: editBreaker
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the breaker to edit"
        required: true
        type: "integer"
        format: "int32"
      - in: body
        name: breaker
        description: "The circuit breaker to create"
        schema:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              description: "Unique name of the circuit breaker"
            displayName:
              type: string
              description: "A descriptive display name of the circuit breaker"
            amperage:
              type: integer
              description: "The amperage of the circuit breaker"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Breaker"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
    
    delete:
      tags:
      - "Circuit Breakers"
      produces:
      - "application/json"
      description: "Deletes an existing circuit breaker" 
      operationId: deleteBreaker
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the circuit breaker to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"
  
  #Switches        
  /buttonColor:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a list of all defined button LED colors" 
      operationId: listButtonColor
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    post:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new button LED color" 
      operationId: createButtonColor
      parameters:
        - in: body
          name: buttonLEDColor
          description: "The button LED color to create"
          schema:
            type: object
            required:
              - name
              - hexValue
              - brightnessMinimum
              - brightnessMaximum
            properties:
              name:
                type: string
                description: "Unique name of the button LED color"
              displayName:
                type: string
                description: "A descriptive display name of the button LED color"
              hexValue:
                type: string
                description: "The button LED color in hex (#XXXXXX), hash sign optional"
              brightnessMinimum:
                type: integer
                minimum: 0
                maximum: 100
                description: "The minimum brightness this LED can be set"
              brightnessMaximum:
                type: integer
                minimum: 0
                maximum: 100
                description: "The maximum brightness this LED can be set"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

  /buttonColor/{id}:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a button LED color by ID" 
      operationId: getButtonLEDColorByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the button LED color to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    patch:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing button LED color" 
      operationId: editButtonColor
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the button LED color to return"
        required: true
        type: "integer"
        format: "int32"
      - in: body
        name: buttonLEDColor
        description: "The button LED color to edit"
        schema:
          type: object
          required:
            - name
            - hexValue
            - brightnessMinimum
            - brightnessMaximum
          properties:
            name:
              type: string
              description: "Unique name of the button LED color"
            displayName:
              type: string
              description: "A descriptive display name of the button LED color"
            hexValue:
              type: string
              description: "The button LED color in hex (#XXXXXX), hash sign optional"
            brightnessMinimum:
              type: integer
              minimum: 0
              maximum: 100
              description: "The minimum brightness this LED can be set"
            brightnessMaximum:
              type: integer
              minimum: 0
              maximum: 100
              description: "The maximum brightness this LED can be set"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    delete:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Deletes existing button LED color" 
      operationId: deleteButtonColor
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the button LED color to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"

  /brightnessName:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a list of all named button LED brightness levels" 
      operationId: listBrightnessName
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    post:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new named button LED brightness level" 
      operationId: createBrightnessName
      parameters:
        - in: body
          name: brightnessName
          description: "The button LED brightness name to create"
          schema:
            type: object
            required:
              - name
              - brightnessValue
            properties:
              name:
                type: string
                description: "Unique name of the brightness level"
              displayName:
                type: string
                description: "A descriptive display name of the brightness level"
              brightnessValue:
                type: integer
                minimum: 0
                maximum: 100
                description: "The value this brightness name represents"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

  /brightnessName/{id}:
    get:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Retrieves a named button LED brightness level by ID" 
      operationId: getBrightnessNameByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the named button LED brightness to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    patch:
      tags:
      - "Switches"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing named button LED brightness level" 
      operationId: editBrightnessName
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the named button LED brightness to edit"
          required: true
          type: "integer"
          format: "int32"
        - in: body
          name: brightnessName
          description: "The button LED brightness name to edit"
          schema:
            type: object
            required:
              - name
              - brightnessValue
            properties:
              name:
                type: string
                description: "Unique name of the brightness level"
              displayName:
                type: string
                description: "A descriptive display name of the brightness level"
              brightnessValue:
                type: integer
                minimum: 0
                maximum: 100
                description: "The value this brightness name represents"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/BrightnessName"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    delete:
      tags:
      - "Switches"
      produces:
      - "application/json"
      description: "Deletes a named button LED brightness level" 
      operationId: deleteBrightnessName
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the named button LED brightness level to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"

  #Controller
  /controller:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves a list of all controllers" 
      operationId: listControllers
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    post:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Creates a new controller" 
      operationId: createController
      parameters:
        - in: body
          name: controller
          description: "The controller to create"
          schema:
            type: object
            required:
              - id
              - macAddress
              - hwVersion
            properties:
              name:
                type: string
                description: "Name of the controller"
              displayName:
                type: string
                description: "A descriptive display name of the controller"
              macAddress:
                type: string
                description: "Unique MAC hardware address of the controller"
              ipAddress:
                type: string
                description: "IP address of the controller"
              subnet:
                type: string
                description: "Subnet mask of the controller"
              dns:
                type: string
                description: "IP address of the DNS server"
              gateway:
                type: string
                description: "IP address of the network gateway"
              mqttUsername:
                type: string
                description: "Override of the default MQTT username"
              mqttPassword:
                type: string
                description: "Override of the default MQTT password"
              hwVersion:
                type: integer
                description: "Hardware version"
                enum:
                  - 2

      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/ButtonLEDColor"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

  /controller/{id}:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves a controller by ID" 
      operationId: getControllerByID
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to return"
        required: true
        type: "integer"
        format: "int32"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    patch:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      description: "Edits an existing controller by ID" 
      operationId: editController
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the controller to edit"
          required: true
          type: "integer"
          format: "int32"
        - in: body
          name: controller
          description: "The controller to edit"
          schema:
            type: object
            required:
              - id
              - macAddress
              - hwVersion
            properties:
              name:
                type: string
                description: "Name of the controller"
              displayName:
                type: string
                description: "A descriptive display name of the controller"
              macAddress:
                type: string
                description: "Unique MAC hardware address of the controller"
              ipAddress:
                type: string
                description: "IP address of the controller"
              subnet:
                type: string
                description: "Subnet mask of the controller"
              dns:
                type: string
                description: "IP address of the DNS server"
              gateway:
                type: string
                description: "IP address of the network gateway"
              mqttUsername:
                type: string
                description: "Override of the default MQTT username"
              mqttPassword:
                type: string
                description: "Override of the default MQTT password"
              hwVersion:
                type: integer
                description: "Hardware version"
                enum:
                  - 2
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    delete:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Deletes a controller by ID" 
      operationId: deleteController
      security: 
        - ApiKeyAuth: [] 
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the controller to delete"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal Server Error"

  /controller/devicename/{deviceName}:
    get:
      tags:
      - "Controllers"
      produces:
      - "application/json"
      description: "Retrieves a controller by device name" 
      operationId: getControllerNameByDeviceName
      parameters:
      - name: "deviceName"
        in: "path"
        description: "The device name (MAC Address) of the controller to retrieve"
        required: true
        type: "string"
      security: 
        - ApiKeyAuth: [] 
      responses:
        200:
          description: "Success"
          schema:
              $ref: "#/definitions/Controller"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"



#Security
securityDefinitions:
  ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

#Defined Objects
definitions:
  Error:
    type: "object"
    properties:
      error:
        type: "string"
        description: "Additional data about the given error"
  
  Heartbeat:
    type: "object"
    properties:
      time:
        type: "string"
        format: "date-time"
        description: "Current date and time UTC"
      status:
        type: "string"
        description: "Will always return \"ok\" on success"
    
  Breaker:
    type: "object"
    required:
      - id
      - name
    properties:
      id:
        type: "integer"
        description: "Unique ID of the circuit breaker"
      name:
        type: string
        description: "Unique name of the circuit breaker"
      displayName:
        type: string
        description: "A descriptive display name of the circuit breaker"
      amperage:
        type: integer
        description: "The amperage of the circuit breaker"
  
  ButtonLEDColor:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        description: "Unique ID of the button LED color"
      name:
        type: string
        description: "Unique name of the button LED color"
      displayName:
        type: string
        description: "A descriptive display name of the button LED color"
      hexValue:
        type: string
        description: "The button LED color in hex (#XXXXXX)"
      brightnessMinimum:
        type: integer
        minimum: 0
        maximum: 100
        description: "The minimum brightness this LED can be set"
      brightnessMaximum:
        type: integer
        minimum: 0
        maximum: 100
        description: "The maximum brightness this LED can be set"

  BrightnessName:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        description: "Unique ID of the brightness name"
      name:
        type: string
        description: "Unique name of the brightness level"
      displayName:
        type: string
        description: "A descriptive display name of the brightness level"
      brightnessValue:
        type: integer
        minimum: 0
        maximum: 100
        description: "The value this brightness name represents"

  Controller:
    type: object
    required:
      - id
      - macAddress
      - hwVersion
    properties:
      id:
        type: integer
        description: "Unique ID of the controller"
      name:
        type: string
        description: "Name of the controller"
      displayName:
        type: string
        description: "A descriptive display name of the controller"
      macAddress:
        type: string
        description: "Unique MAC hardware address of the controller"
      ipAddress:
        type: string
        description: "IP address of the controller"
      subnet:
        type: string
        description: "Subnet mask of the controller"
      dns:
        type: string
        description: "IP address of the DNS server"
      gateway:
        type: string
        description: "IP address of the network gateway"
      mqttUsername:
        type: string
        description: "Override of the default MQTT username"
      mqttPassword:
        type: string
        description: "Override of the default MQTT password"
      hwVersion:
        type: integer
        description: "Hardware version"
        enum:
          - 2